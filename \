module Main (main) where

import Control.Concurrent
import Control.Monad
import Control.Monad.IO.Class
import Data.Maybe
import Data.Time.Clock.System
import System.Posix.Unistd
import UI.NCurses

newtype SimState = SimState [Entity]

data Entity = Entity {
    tag :: Maybe Tag
  , position :: Maybe (Int, Int)
  , velocity :: Maybe (Int, Int)
  , height :: Maybe Int
  , text :: Maybe String
  , ttfeed :: Maybe Int -- time to feed or die of starvation
  , ttdie :: Maybe Int -- time until life runs out
  , walk :: Maybe [Move]
  , input :: Maybe (Event -> Event -> Event)
  }

newEntity = Entity {
    tag = Nothing
  , position = Nothing
  , velocity = Nothing
  , height = Nothing
  , text = Nothing
  , ttfeed = Nothing  -- time to feed or die
  , ttdie = Nothing -- time until death
  , walk = Nothing
  , input = Nothing
  }

data Tag = Man | Food
    deriving Eq

data Move = N | W | E | S
    deriving Eq

time :: IO Double
time = do
    t <- getSystemTime
    return ((fromIntegral (systemSeconds t)) + (fromIntegral (systemNanoseconds t)) * 1e-9)

-- A Simulation
data Simulation a = Simulation {
    dt :: Int         -- Physics simulation time step
  , frameRate :: Int  -- Max display frame rate
  , simState :: Maybe a
  , updateSim :: Maybe Event -> a -> Maybe a
  , renderSim :: (Integer, Integer) -> Update ()
  }

newSimulation = Simulation {
    dt = 1
  , frameRate = 60
  , simState = Nothing
  , updateSim = undefined
  , renderSim = undefined
  }

data SimLoop = SimLoop {
    window :: Window         -- Current display window
  , nowTime :: Double        -- Current time
  , frameTime :: Double      -- Next frame will be displayed at this time
  , physicsTime :: Double    -- Physics has been simulated up to this time
  , fps :: Double            -- Current frame per second estimate
  }

collisionTop :: Entity -> Entity
collisionTop e@Entity{position = Just (x, y), velocity = Just (dx, dy)}
    | y <= 0 = e{position = Just (x, -y), velocity = Just (dx, -1*dy)}
    | otherwise = e
collisionTop e = e

collisionBot :: Entity -> Entity
collisionBot e@Entity{position = Just (x, y), velocity = Just (dx, dy), height = mh}
    | y + h >= 40 = e{position = Just (x, -y), velocity = Just (dx, -1*dy)}
    | otherwise = e
    where h = fromMaybe 0 mh
collisionBot e = e

renderEntity :: (Integer, Integer) -> Entity -> Update ()
renderEntity (rows, cols) e@Entity{position = Just (x, y), height = Just h, text = Just t} = do
    moveCursor rows cols
    drawString t
renderEntity _ _ = return ()

renderWorld :: (Integer, Integer) -> SimState -> Update ()
renderWorld (rows, cols) (SimState es) = do
    clear
    moveCursor 0 0
    drawLineH Nothing cols
    moveCursor (rows-1) 0
    drawLineH Nothing cols
    mapM_ (renderEntity (rows, cols)) es

integratePosition :: Entity -> Entity
integratePosition e@Entity{position = Just (x, y), velocity = Just (dx, dy)} = e{position = Just (x + dx, y + dy)}
integratePosition e = e

--physics :: Simulation a -> SimLoop -> Curses (Simulation a, SimLoop)
--physics g@Simulation{dt = dt, simState = Just gs} gl@SimLoop{nowTime = now, physicsTime = pt, frameTime = ft}
--    | pt + 1.0 < ft = physics g gl{physicsTime = now}  -- Skip ahead after missing time
--    | pt < ft = do
--        when (now < pt) (liftIO $ threadDelay (truncate (1e6 * clamp (ft - pt) 0.0 dt)))
--        ev <- getEvent (window gl) (Just 0)
--        physics s{simState = (updateSimulation g) ev ss} sl{physicsTime = pt + dt}
--physics s sl = return (s, sl)

physics :: Simulation a -> SimLoop -> Curses (Simulation a, SimLoop)
physics s@Simulation{simState = Just ss} sl@SimLoop{nowTime = now} = do
    ev <- getEvent (window sl) (Just 0)
    --s' <- s{simState = (updateSim s) ev ss}  -- Simulation.updateSim holds function updateWorld() which returns Maybe SimState
    t <- liftIO time
    --sl' <- sl{nowTime = t}
    --return (s', sl')
    return ( s{simState = (updateSim s) ev ss}, sl{nowTime = t} )
physics s sl = return (s, sl)

initWorld :: SimState
initWorld = SimState [
   newEntity{tag=Just Man,text= Just "O",position=Just (5,5),velocity=Just (1,1),height=Just 1,ttfeed=Just 50,ttdie=Just 100,walk=[N,W,S,S,E,W]}
   ]

-- Input Handlers
inputApply :: Maybe Event -> Entity -> Entity
inputApply (Just ev) e@Entity{input = Just f} = f ev e
inputApply _ e = e

updateWorld :: Event -> SimState -> Maybe SimState
updateWorld (EventCharacter 'q') _ = Nothing
updateWorld (EventCharacter 'Q') _ = Nothing
updateWorld ev (SimState es) _ = Just $ SimState (system es)
    where system = map collisionTop . map collisionBottom . map collisionLeft . map collisionRight . map integratePosition . map tickInc . map (inputApply ev)

simLoop :: Simulation a -> SimLoop -> Curses ()
simLoop Simulation{simState = Nothing} sl = return ()
simLoop s@Simulation{simState = Just ss} sl = do
    size <- screensize
    updateWindow (window sl) ((renderSim s) size ss)
    render
    t <- liftIO time
    --(s', sl') <- physics s sl{nowTime = t, frameTime = 0.0}
    (s', sl') <- (s{simState = (updateSim s)}, sl{nowTime = t, frameTime = 0.0})
    simLoop s' sl'
    --simLoop s{simState = (updateSim s)}, sl{nowTime = t, frameTime = 0.0}
   

runSimulation :: Simulation a -> IO ()
runSimulation g = runCurses $ do
    setCursorMode CursorInvisible
    setEcho False
    w <- defaultWindow
    t <- liftIO time
    simLoop g SimLoop{window = w, nowTime = t, frameTime = t, physicsTime = t, fps = 0.0}

-- Program entry point
main :: IO ()
main = runSimulation newSimulation{simState = Just initWorld, updateSim = updateWorld, renderSim = renderWorld}

